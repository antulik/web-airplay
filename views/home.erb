
<div class="container-fluid">

  <div class="row">
    <div class="col-xs-4">
      <span class="navbar-brand" href="#">WebAirplay</span>
    </div>

    <div class="col-xs-8">
      <div class="pull-right">
        <span>Bookmark this link >>></span>
        <!--
        javascript:(a = (b = document).createElement('script')).src = 'http://localhost:4567/js/bm.js', b.body.appendChild(a);void(0);

        javascript:(a = (b = document).createElement('img')).src = 'http://localhost:4567/img_play/' + encodeURIComponent(document.location), b.body.appendChild(a);void(0);
-->
        <a href="javascript:(a%20=%20(b%20=%20document).createElement('img')).src%20=%20'http://localhost:4567/img_play/'%20+%20encodeURIComponent(document.location),%20b.body.appendChild(a);void(0);" title="AirPlay" class="btn btn-warning navbar-btn" id="bookmark-link">
          WebAirplay
        </a>
      </div>
    </div>
  </div>

</div>
<form role="form" action="/play" method="post">
  <div class="form-group">
    <label for="play-url">Youtube URL</label>
    <input type="text" name='url' class="form-control" id="play-url" placeholder="http://www.youtube.com/watch?v=Jg_IORfUXMs">

  </div>

  <div class="form-group">
    <select name="device_index" class="form-control">
      <% device_names.each_with_index do |name, index| %>
          <option value="<%= index %>">
            <%= name %>
          </option>
      <% end %>
    </select>
  </div>

  <button type="submit" class="btn btn-success btn-block">Play</button>
</form>

<br>
<br>

<div id="player"><span id="loading">Loading</span></div>

<script type="text/javascript">
  $(function() {

  })
</script>

<script type="text/javascript">
    $(function () {
        var PlayingTrack = Backbone.Model.extend({
            defaults: {
                "duration":  0
            }
        });

        Player = Backbone.Model.extend({

            PLAYSTATE_PLAYING: 'playing',
            PLAYSTATE_PAUSED: 'paused',
            PLAYSTATE_STOPPED: 'stopped',

            defaults: {
                "_position":  0,
                "_duration": 0,
                "_playState": "stopped",
                "playingTrack": new PlayingTrack,
                "playing": false
            },

            constructor: function() {
                Backbone.Model.apply(this, arguments);
                this.on('change:_position', function(model, val) {
                    this.trigger('change:position', val);
                });
                this.on('change:_duration', function(model, val) {
                    var current_track = this.get('playingTrack');

                    if (current_track.get('duration') != val) {
                        var new_track = new PlayingTrack({
                            duration: val
                        });
                        this.set('playingTrack', new_track);
                    }
                    this.trigger('change:playingTrack', new_track);
                });

                this.on('change:_playState', function(model, val) {
                   this.trigger('change:playState', val);
                });
            },

            playState: function() {
                return this.get('_playState');
            },

            position: function(new_position) {
                if (new_position) {
                    $.post('seek', { seconds: new_position } );
                }
                return this.get('_position');
            },

            playingTrack: function() {
                return this.get('playingTrack');
            },

            shuffle: function() {},
            volume: function() {},

            previous: function() {},
            togglePause: function() {
                if (this.get('_playState') == this.PLAYSTATE_PLAYING) {
                    this.set('_playState', this.PLAYSTATE_PAUSED);
                } else {
                    this.set('_playState', this.PLAYSTATE_PLAYING);
                }

            },
            next: function() {},

            url: function() {
                return '/backbone_info'
            }
        });


        play = new Player;

        setInterval(function() {
            play.fetch();
        }, 1000);


        var player = new metronomik.player("player", play);

        $('.m-volume, .m-logo, .m-shuffleToggle').hide();
    });
</script>

<script type="text/javascript">
    githubReleaseReminder({
        url: 'https://api.github.com/repos/antulik/web-airplay/releases',
        current_release_id: 508978,
        on_new_release: function(current_release, new_release) {
            console.log(current_release);
            console.log(new_release);

            var html = '<div class="alert alert-warning">New version is available. Please download new version at:';
            html += '<pre>' + new_release.html_url + '</pre>';
            html += '</div> ';

            $('body').prepend(html);
        }
    });
</script>

